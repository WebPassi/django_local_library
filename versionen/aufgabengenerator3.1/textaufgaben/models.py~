import re

from django.db import models


from elements import * 

class Textaufgabe(models.Model):
    text = models.TextField()
    bereich = models.CharField(max_length=10)
    inhalt = models.CharField(max_length=10)
    schwierigkeit = models.IntegerField()
    punkte = models.IntegerField()

    muster = r"#\[[^(\]#)]*\]#"


    def __str__(self):              # __unicode__ on Python 2
        return self.text



    def importiere(self,datei):

        aufgabe = open(datei).readlines()
        info = aufgabe[1].replace(' ','').split('#')

        self.text=aufgabe[0] 
        self.bereich=info[0] 
        self.inhalt=info[1] 
        self.schwierigkeit=info[2] 
        self.punkte=info[3]
        try:
            self.save()
        except:
            print (self.text)
        


    def variablen(self):
        varoriginal = re.findall(self.muster,self.text)
        var=[]

        for v in varoriginal:
            var.append(v.replace('#[','').replace(']#',''))

        return var              


    def erzeugeAufgabe(self,werte):
        varoriginal = re.findall(self.muster,self.text)
        

        aufgabentext=self.text
        for i,v in enumerate(varoriginal):
            aufgabentext=aufgabentext.replace(varoriginal[i],str(werte[i]))

        return aufgabentext


    def loesung(self,werte):

        zahl=[]
        einheit=[]
        for w in werte:
            zahl.append(float(w.split(" ")[0]))
            einheit.append(w.split(" ")[1])
            

        if self.inhalt == "Term":
            var=self.variablen()
            
            ergebnis=1.0
            for i,v in enumerate(var):
                if v == "Dividend":
                    dividend_zahl=zahl[i]
                    dividend_einheit=einheit[i]
                    ergebnis=ergebnis*zahl[i]*normiereEinheit(einheit[i])
                elif v == "Divisor":
                    divisor_zahl=zahl[i]
                    divisor_einheit=einheit[i]
                    ergebnis=ergebnis/(zahl[i]*normiereEinheit(einheit[i]))
                
            lsg="$\\frac{" + latex(dividend_zahl) + "\\mathrm{\\," + latex(dividend_einheit) + "}}{" + latex(divisor_zahl) + "\\mathrm{\\," + latex(divisor_einheit) + "}} = \\frac{" + latex(dividend_zahl) + "\\cdot 10^{" + latex(normiereEinheitZehnerpotenz(dividend_einheit)) + "}\\mathrm{\\," + latex(grundeinheit(dividend_einheit)) + "}}{" + latex(divisor_zahl) + "\\cdot 10^{" + latex(normiereEinheitZehnerpotenz(divisor_einheit)) + "}\\mathrm{\\," + latex(grundeinheit(divisor_einheit)) + "}}=" + latex(ergebnis) + "$"
            return lsg
#            return str(ergebnis)

        else:
            return 0







